// Javascript Methods
// To merge two objects together
var obj1 = {'key1': 1};
var obj2 = {'key2': 2};

	// using Angular.extend
angular.extend({}, obj1, obj2);
// --------------------------------

// Finding a randomized product from the top 10 products, from PairingModalComponent
const WINE = [
	{
		count: 1,
		keys: ['wine', 'white', 'white.sauvignon-blanc']
	},
	{
		count: 1,
		keys: ['wine', 'white', 'white.chardonnay']
	}
];

	// This will recursively go down the tree (category) until it finds white.sauvignon-blanc
getProducts (categories, keys, count) {
	var category = categories.filter(obj => obj.value.indexOf(keys[0]) !== -1)[0];

	if (!category) { return []; }

	if (keys.length === 1) {
		// Lodash method for randomly grabbing x number of products in array
		return _.sampleSize(category.products.slice(0, 10), count);
	} else {
		return this.getProducts(category.children, keys.slice(1), count);
	}
}

var selectedProducts = WINE.map((product) => ({
	...product,
	products: this.getProducts(nextProps.alcoholData.categories, product.keys, product.count)
}));
// selectedProducts will return an array like [{count: 2, keys: [...], products: [{product1}, {product2}]}]
// since we want an flattened array of all the products (selectedProducts.products is an array) we must do the following:
var items = [].concat.apply([], selectedProducts.map(p => p.products));
// --------------------------------

// Safely returning a value inside an object
var obj = {first: {second: {third : [1, 2, 3]}}};
return obj && obj.first && obj.first.second && obj.first.second.third && obj.first.second.third[0];

	// This would give an error
return obj && obj.first && obj.second[0];
//---------------------------------

// Waiting for images (array) to complete loading
this.state = {
	imageLoaded = false
};

loadImages (images) {
	Promise.all(images.map(image => new Promise(function (resolve, reject) {
		var img = new Image();
		img.onload = resolve;
		img.onerror = resolve;
		img.src = image;
	}))).then(_ => {
		this.setState({ imageLoaded: true });
		setTimeout(_ => this.setState({ animationReady: true }), TRANSITION_ANIMATE_TIME);
	});
}

// BEM => Block, Element, Model

// https://github.com/getify/You-Dont-Know-JS/
// List of JavaScript weirdness
var a = null;
typeof a; //returns "object"

// Default parameters
function foo(a = 2) { // ES6 syntax
    console.log( a );
} // becomes transpiled into
function foo() {
    var a = arguments[0] !== (void 0) ? arguments[0] : 2;
    console.log( a );
}

// Coercion rules http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3

// Closure example
function makeAdder(x) {
	function add(y) {
		return x + y;
	};
	return add;
};

var plusOne = makeAdder(1);
plusOne(4); // 5; 1 + 5
plusOne(9); // 10; 1 + 9

// CSS Notes

// Using SVG http://alistapart.com/article/practical-svg
// Difference between viewport and viewBox
<svg width="100" height="100" viewBox="0 0 100 100">

// Use an svg property called preserveAspectRatio => default is xMidYMid
<svg perserveAspectRatio="xMinYmax meet"> or "xMinYmax slice"
// Meet means you want to contain the viewBox within viewport, slice means you can cut it.
// preserveAspectRatio="xMinYmax meet" is the same as background-position: 0 100%; background-size: contain;
